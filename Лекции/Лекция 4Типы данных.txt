Мы считаем в рамках курса: тип данных - множество всех значений.
В хаскель есть некоторое количество встроенных типов данных:

Integer - множество всех целых чисел без ограничения
Int - множество целых чисел ограниченное
Bool
Char
String
Unit - обозначается ()
[]-список, тип, он полиморфный

Есть типовые конструкторы, которы конструируют одни типы из других:
t1->t2  - тип всех функции которые делают из  типа t1 тип t2
(a,b,c,d,...)
a, b, c, d 

Типовые кострукторы - отображение в множестве типов(по двум типам выдает третий тип)
Типовый конструктор a->(b->c->(d,e))->f для любых a,b,c,d,e,f(F(a,b,c,d,e,f))
Полиморфный тип, как список, может содержать элементы любых типов 
[a]->Int Эта штука либо константа, либо длина
()->a
В любом полиморфном типе есть известная и неизвестная часть, поведение функции зависит только от известной части
(a,b)->a
(a->b)->(b->c)->a->c Суперпозиция

data Color = Red|Green|Blue - алгебраический тип данных, R,G,B - конструкторы, color - тип данных
У конструктора и типов данных могут быть параметры
data Pare a b = P a b - имя типа, два типовых параметра a и b, типовый конструктор, ПАРА
data List a = Nil| Cons a (List a) - тип списка

Образцы(patterns)
когда мы пишем f (a,b) то мы можем разбирать (a,b) по образцам.
Ничего не вычисляется до тех пор, пока не проходит сопоставление с образцом

length Tsil a ->Int
map (a->b) Tsil a -> Tsil b
reverse Tsil a ->Tsil a
concat
flatten Tsil(Tsil a)->Tsil a
fromList:: [a]-> Tsil a
toList:: Tsil a -> [a]
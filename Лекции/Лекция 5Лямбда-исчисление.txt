x - переменнаая
ЛЛ - применение или аппликация
лxЛ - лямбда абстракция
Л = x or ЛЛ or лxЛ

Дерево лямбд -скобки справа налево
Л(Л(ЛxЛy)Лx)

Свободные переменные
FV(x) = {x}
FV(AB) = FV(A) v FV(B)
FV(лxA) = FV(A) \ {x}

lx.y+x - все те переменные, что не является параметром, в данном случае y -свободная переменная, а x - нет, снаружи нет ни одного свободного вхождения
ly.lx.y+x - обе несвободны
Подстановки:
A[x<-b]
x[x<-B]
=B
y[x<-B]=y
(AB)[x<-c]=(A[x<-c])(B[x<-c])
lx.A[x<-B]->lx.A
Точка отделяет переменные
(lx.y)[y<-x]->lz.x так как мы заменяем свободную переменную
\x->E = lx.E



subst a x b
a[x<-b]
	x[x<-b] = b
	y[x<-b] = y
	(mn) [x<-b] = (m[x<-b])(n[x<-b])
	(лx.A)[x<-b]= лx.A
	(лy.A)[x<-b] = лy.(A[x<-b])

alpha
1)(лx.A)И = A[x<-B]
2)A->A'=>лx.A->лx.A'



cbn (App a b) = 
	let a' = cbn a
	case a' of
		Lam x a''->cbn(subst a'' x b)
		_ ->App
		
		
reduce (App a b) = reduce $ subst' a' (Var x) b
	where
		notLam (Lam x y) = False
		notLam _ = True
		(Lam x a') = reduce a
reduce (App a b) | notLam a' = reduce $ App a' (reduce b)
	where
		a' = reduce a
		notLam (Lam x y) = False
		notLam _ = True